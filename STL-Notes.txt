Arrays:
#include <iostream>
#include<array>

using namespace std;
int main() {
  
  int basic[3] ={1,2,3};

  array<int,4> a = {1,2,3,4};

  int size = a.size();

  for(int i=0;i<size;i++ ){ 
    cout<<a[i]<<endl;
  }

  cout<<"Element at 2nd Index-> "<<a.at(2)<<endl;

  cout<<"Empty or not-> "<<a.empty()<<endl;

  cout<<"First Element-> "<<a.front()<<endl;
  cout<<"last Element-> "<<a.back()<<endl;

}


Vector: aka dynamic array : continuous + dynamic .

#include <iostream>
#include<vector>
using namespace std;
int main() {
  
  vector<int> v;

  vector<int> a(5,1);   // make a vector of size 5 and initalize all elemensts with 1.
                        // default value of vector is 0.

  vector<int> last(a);  // here we copied all elements of vector a.
  
   cout<<"print last"<<endl;
  for(int i:last) {
    cout<<i<<" ";
  }cout<<endl;

  cout<<"Capacity-> "<<v.capacity()<<endl;

  v.push_back(1);
  cout<<"Capacity-> "<<v.capacity()<<endl;

  v.push_back(2);
  cout<<"Capacity-> "<<v.capacity()<<endl;

  v.push_back(3);
  cout<<"Capacity-> "<<v.capacity()<<endl;
  cout<<"Size-> "<<v.size()<<endl;

// capacity tells actual size of the vector.
// where as size tells no of elements in the vector.

  cout<<"Elemetn at 2nd Index" <<v.at(2)<<endl;  // index can be accessed using  .at() .

  cout<<"front " <<v.front()<<endl;
  cout<<"back " <<v.back()<<endl;

 cout<<"before pop"<<endl;
  for(int i:v) {
    cout<<i<<" ";
  }cout<<endl;

  v.pop_back();

  cout<<"after pop"<<endl;
  for(int i:v) {
    cout<<i<<" ";
  }

  cout<<"before clear size "<<v.size()<<endl;
  v.clear();                                  // here size becomes 0 but capacity remains same.
  cout<<"after clear size "<<v.size()<<endl;

    //vector::erase()
    // erase() function is used to remove elements from a container from the specified position or range.
    //Syntax : 
    //1. vectorname.erase(position)
    //2. vectorname.erase(startingposition, endingposition)
    
    
    vector<int> myvector{ 1, 2, 3, 4, 5 };
    vector<int>::iterator it;
    it = myvector.begin();
    myvector.erase(it);





    // declaration of vector container   //  use of .begin() and .end()
    vector<int> myvector{ 1, 2, 3, 4, 5 };
 
    // using begin() to print vector
    for (auto it = myvector.begin();
         it != myvector.end(); ++it)
        cout << ' ' << *it;
    return 0;

    /

}


//doubly queue i.e dqueue
//that is insertion and deletion of elements from the both end.
//and it is dynamic + random access is available.

Deque: 
#include <iostream>
#include<deque>

using namespace std;
int main() {
  
  deque<int> d;

d.push_back(1);
d.push_front(2);

//d.pop_front();
//d.pop_back();
cout<<endl;

cout<<"Print First INdex Element-> "<<d.at(1)<<endl; // .at() to get the data from the index.

cout<<"front "<<d.front()<<endl;
cout<<"back "<<d.back()<<endl;
cout<<"Empty or not" <<d.empty()<<endl;

// .begin() && .end() to get the iterator of the front and back.


cout<<"before erase" <<d.size()<<endl; // delete element from the dqueue.
d.erase(d.begin(),d.begin()+1);
cout<<"after erase" <<d.size()<<endl;
for(int i:d){
  cout<<i<<endl;
}
// in deque size becomes as per the values in dqueue but max_size() remains as the actual size of dequeue.
}


List: it is same as doubly linked list.
// so direct or random access is not possible in here.

#include <iostream>
#include<list>

using namespace std;
int main() {
  list<int> l;

  list<int> n(5,100);
  cout<<"Printing n"<<endl;
  for(int i:n) {
    cout<<i<<" ";
  }cout<<endl;
  l.push_back(1);
  l.push_front(2);

  for(int i:l) {
    cout<<i<<" ";
  }
  cout<<endl;
  l.erase(l.begin());
  cout<<"after erase"<<endl;
  for(int i:l) {
    cout<<i<<" ";
  }

  cout<<"size of list"<<l.size()<<endl;
}



Stack:

#include <iostream>
#include<stack>

using namespace std;
int main() {
  stack<string> s;

  s.push("love");
  s.push("babbar");
  s.push("Kumar");

  cout<<"Top Element-> "<<s.top()<<endl;

  s.pop();
  cout<<"Top Element-> "<<s.top()<<endl;

  cout<<"size of stack"<<s.size()<<endl;

  cout<<"Empty or not "<<s.empty()<<endl;

}






Queue:

#include <iostream>
#include<queue>

using namespace std;
int main() {
  
  queue<string> q;

  q.push("love");
  q.push("Babbar");
  q.push("Kumar");

  cout<<"Size before pop" <<q.size()<<endl;
  
  cout<<"First Element "<<q.front()<<endl;
  q.pop();
  cout<<"First Element "<<q.front()<<endl;

  cout<<"Size after pop" <<q.size()<<endl;

}


Priority Queue:  // default priority queue is max heap.

#include <iostream>
#include<queue>

using namespace std;
int main() {
  //max heap
  priority_queue<int> maxi;

  //min - heap
  priority_queue<int,vector<int> , greater<int> > mini;

  maxi.push(1);
  maxi.push(3);
  maxi.push(2);
  maxi.push(0);
  cout<<"size-> "<<maxi.size()<<endl;
  int n = maxi.size();
  for(int i=0;i<n;i++) {
    cout<<maxi.top()<<" ";
    maxi.pop();
  }cout<<endl;

  mini.push(5);
  mini.push(1);
  mini.push(0);
  mini.push(4);
  mini.push(3);

  int m = mini.size();
  for(int i=0;i<m;i++) {
    cout<<mini.top()<<" ";
    mini.pop();
  }cout<<endl;

cout<<"khaali h kya bhai  ?? -> "<<mini.empty()<<endl;


}

Set: // all unique elements are in set.
    // in the backend it is implemented using BST (binary search tree)
    // no modifications allowed , either we insert once or delete it.
    // we get elements in sorted order.
#include <iostream>
#include<set>

using namespace std;
int main() {
  set<int> s;

  s.insert(5);
  s.insert(5);
  s.insert(5);
  s.insert(1);
  s.insert(6);
  s.insert(6);
  s.insert(0);
  s.insert(0);
  s.insert(0);

  for(auto i : s) {
    cout<<i<<endl;
  }cout<<endl;

set<int>::iterator it = s.begin(); // geting iterator of the begining .
it++;

  s.erase(it);

  for(auto i : s) {
    cout<<i<<endl;
  }
cout<<endl;
cout<<"-5 is present or not -> "<<s.count(-5)<<endl; // find if element is present or not.

set<int>::iterator itr = s.find(5); // return iterator if element is present.

for(auto it=itr;it!=s.end();it++) {
  cout<<*it<<" ";
}cout<<endl;

}





Map: key -> value pair is used and all keys are unique.

#include <iostream>
#include<map> 

using namespace std;
int main() {
  map<int,string> m;

  m[1]= "babbar";
  m[13]="kumar";
  m[2]="love";

  m.insert( {5,"bheem"});

  cout<<"before erase"<<endl; 
  for(auto i:m) {
    cout<<i.first<<" "<<i.second<<endl;  // .first used for key & .second used for value.
  }

  cout<<"finding -13 -> " <<m.count(-13)<<endl;

 // m.erase(13);
  cout<<"after erase"<<endl;
  for(auto i:m) {
    cout<<i.first<<" "<<i.second<<endl;
  }cout<<endl<<endl;

  auto it = m.find(5);

  for(auto i=it;i!=m.end();i++) {
    cout<<(*i).first<<endl;
  }

}





Algo:

#include <iostream>
#include<algorithm>
#include<vector>

using namespace std;
int main() {
  
  vector<int> v;

  v.push_back(1);
  v.push_back(3);
  v.push_back(6);
  v.push_back(7);

  cout<<"Finding 6-> "<<binary_search(v.begin(),v.end(),6)<<endl;


//lower_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last) which         has a value not less than ‘x’.
//upper_bound(first_iterator, last_iterator, x) – returns an iterator pointing to the first element in the range [first,last)                  which has a value greater than ‘x’.

  cout<<"lower bound-> "<<lower_bound(v.begin(),v.end(),6)-v.begin()<<endl;
  cout<<"Uppper bound-> "<<upper_bound(v.begin(),v.end(),4)-v.begin()<<endl;

  int a =3;
  int b =5;

  cout<<"max -> "<<max(a,b);

  cout<<"min -> "<<min(a,b);

  swap(a,b);
  cout<<endl<<"a-> "<<a<<endl;

  string abcd = "abcd";
  reverse(abcd.begin(),abcd.end());
  cout<<"string-> "<<abcd<<endl;

  rotate(v.begin(),v.begin()+1,v.end());
  cout<<"after rotate"<<endl;
  for(int i:v){
    cout<<i<<" ";
  }

  sort(v.begin(),v.end());
  cout<<"after sorting"<<endl;
for(int i:v){
    cout<<i<<" ";
  }

}

